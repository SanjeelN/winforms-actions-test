# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: MSBuild

on:
  push:
    branches: '**'
  pull_request:
    branches: [ "main" ]

env:
  # Path to the solution file relative to the root of the project.
  SOLUTION_FILE_PATH: .

  # Configuration type to build.
  # You can convert this to a build matrix if you need coverage of multiple configuration types.
  # https://docs.github.com/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
  BUILD_CONFIGURATION: Release

permissions:
  contents: read
  
jobs:
  build:
    name: Build
    permissions: write-all

    runs-on: ubuntu-latest
    strategy:
      matrix:
        dotnet-version: ['8.0.x']
    steps:
      - uses: actions/checkout@v4

      - name: Debug - List Matchers Directory
        run: ls -la .github
        
      - name: Enable problem matchers
        run: echo "::add-matcher::matchers/dotnet.json"     

      - name: Install dependencies
        working-directory: ./SampleConsoleApp
        run: dotnet restore
        
      - name: Build
        working-directory: ./SampleConsoleApp
        run: dotnet build --no-restore

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: ./SampleConsoleApp/bin/
 

  test:
    needs: build
    permissions: write-all
    strategy:
      matrix:
        test-suite: ['SampleTest1', 'SampleTest2']
    name: Test Suite ${{ matrix.test-suite }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: ./SampleConsoleApp/bin/

      - name: Run Tests
        working-directory: ./SampleTestProject
        run: dotnet test --filter "TestCategory=${{ matrix.test-suite }}" --configuration Release -v minimal --no-build --logger GitHubActions '/p:CollectCoverage=true;CoverletOutputFormat="json,lcov,cobertura";MergeWith=${{github.workspace}}/coverage.json;CoverletOutput=${{github.workspace}}/coverage' tests/Sonos.Base.Tests -- RunConfiguration.CollectSourceInformation=true

      - name: 📝 Code Coverage report
        run: |
          dotnet tool install --global dotnet-reportgenerator-globaltool --version 5.1.23
          reportgenerator -reports:${{github.workspace}}/coverage.cobertura.xml -targetdir:${{github.workspace}}/report -reporttypes:MarkdownSummaryGithub "-filefilters:-*.g.cs" -verbosity:Warning
          sed -i 's/# Summary/## 📝 Code Coverage/g' ${{github.workspace}}/report/SummaryGithub.md
          sed -i 's/## Coverage/### Code Coverage details/g' ${{github.workspace}}/report/SummaryGithub.md
          cat ${{github.workspace}}/report/*.md >> $GITHUB_STEP_SUMMARY 

      - name: Publish Test Results     
        uses: EnricoMi/publish-unit-test-result-action@v2.19.0
        if: always()
        with:
          trx_files: "${{ github.workspace }}/**/*.trx"
