# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: MSBuild

on:
  push:
    branches: '**'
  pull_request:
    branches: [ "main" ]

env:
  # Path to the solution file relative to the root of the project.
  SOLUTION_FILE_PATH: .

  # Configuration type to build.
  # You can convert this to a build matrix if you need coverage of multiple configuration types.
  # https://docs.github.com/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
  BUILD_CONFIGURATION: Release

permissions:
  contents: read
  
jobs:
  Prepare-net:
    name: test suite
    permissions: write-all
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history for all branches and tags
      - name: Check out the code
        uses: actions/setup-dotnet@v4
        with:
            dotnet-version: |
              8.x

      - name: Restore dependencies
        run: dotnet restore ./ConsoleApp

      - name: Build the project
        run: dotnet build ./ConsoleApp --configuration Release

      - name: Publish the project
        run: nbgv prepare-release
  
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: published-artifacts
          path: ./artifacts

  Run-Tests: 
    needs: Prepare-net
    permissions: write-all
    strategy:
      matrix:
        test_project:
          - name: TestProject1
            path: ./TestProject1/TestProject1.csproj
            run_ps1: false
          - name: TestProject2
            path: ./TestProject2/TestProject2.csproj
            run_ps1: false
          - name: TestProject3
            path: ./TestProject3/TestProject3.csproj
            run_ps1: true
          - name: TestProject4
            path: ./TestProject4/TestProject4.csproj
            run_ps1: true
    name: Test Suite ${{ matrix.test_project.name }}
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0 # Fetch all history for all branches and tags  

    - name: run ps1 script
      if: ${{ matrix.test_project.run_ps1 == true }}
      run: |
        pwsh -File ./testscript.ps1

    - name: Test with dotnet
      run: dotnet test ${{ matrix.test_project.path }} --logger "trx;LogFileName=TestResults.xml" --results-directory "TestResults-${{ matrix.test_project.name }}" --collect:"XPlat Code Coverage"

    - name: Upload dotnet test results
      uses: actions/upload-artifact@v4
      with:
        name: dotnet-results-${{ matrix.test_project.name}}
        path: TestResults-${{ matrix.test_project.name }}

    - name: Publish Test Results     
      uses: EnricoMi/publish-unit-test-result-action@v2.19.0
      if: always()
      with:
        files: "TestResults-${{ matrix.test_project.name }}/TestResults.xml"
    
  Publish-Test-Results:
    needs: Run-Tests
    permissions: write-all
    runs-on: ubuntu-latest
    steps:
      - name: Check out the code
        uses: actions/checkout@v4

      - name: Install dotnet-coverage Tool
        run: dotnet tool install --global dotnet-coverage

      - name: Download Test Results for TestProject1
        uses: actions/download-artifact@v4
        with:
          name: dotnet-results-TestProject1
          path: TestResults/TestProject1

      - name: Download Test Results for TestProject2
        uses: actions/download-artifact@v4
        with:
          name: dotnet-results-TestProject2
          path: TestResults/TestProject2

      - name: Download Test Results for TestProject3
        uses: actions/download-artifact@v4
        with:
          name: dotnet-results-TestProject3
          path: TestResults/TestProject3

      - name: Download Test Results for TestProject4
        uses: actions/download-artifact@v4
        with:
          name: dotnet-results-TestProject4
          path: TestResults/TestProject4

      - name: Debug - List Downloaded Test Results
        run: ls -R TestResults/ 

      - name: Combine Coverage Reports # This is because one report is produced per project, and we want one result for all of them.
        uses: danielpalme/ReportGenerator-GitHub-Action@v5.4.5
        with:
          reports: "**/*.cobertura.xml" #globbing to merge
          targetdir: "${{ github.workspace }}" 
          reporttypes: "Cobertura" 
          verbosity: "Info" # The verbosity level of the log messages. Values: Verbose, Info, Warning, Error, Off
          title: "Code Coverage" # Optional title.
          tag: "${{ github.run_number }}_${{ github.run_id }}" # Optional tag or build version.
          toolpath: "reportgeneratortool" # Default directory for installing the dotnet tool.

      - name: Upload Combined Coverage XML
        uses: actions/upload-artifact@v4
        with:
          name: coverage
          path: ${{ github.workspace }}/Cobertura.xml
          retention-days: 5

      - name: Publish Code Coverage Report #this outputs to markdowns
        uses: irongut/CodeCoverageSummary@v1.3.0
        with:
          filename: "Cobertura.xml"
          badge: true
          fail_below_min: false # just informative for now
          format: markdown
          hide_branch_rate: false
          hide_complexity: false
          indicators: true
          output: both
          thresholds: "10 60"
     
      - name: Upload Coverage Results
        uses: actions/upload-artifact@v4
        with:
          name: code-coverage-results
          path: code-coverage-results.md

      - name: Output Coverage Results to Summary
        run: cat code-coverage-results.md >> $GITHUB_STEP_SUMMARY  