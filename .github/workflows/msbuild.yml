# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: MSBuild

on:
  push:
    branches: '**'
  pull_request:
    branches: [ "main" ]

env:
  # Path to the solution file relative to the root of the project.
  SOLUTION_FILE_PATH: .

  # Configuration type to build.
  # You can convert this to a build matrix if you need coverage of multiple configuration types.
  # https://docs.github.com/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
  BUILD_CONFIGURATION: Release

permissions:
  contents: read
  
jobs:
  build:
    name: "Build & Test"

    # Permissions this GitHub Action needs for other things in GitHub
    permissions: write-all

    runs-on: ubuntu-latest

    steps:
      - name: Check out the code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0        
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: |
            8.x
      - name: "Restore/Build/Test"
        run: dotnet test ./ConsoleApp/ConsoleApp.sln --configuration Release --verbosity normal --logger trx --collect:"XPlat Code Coverage"
      - name: Combine Coverage Reports # This is because one report is produced per project, and we want one result for all of them.
        uses: danielpalme/ReportGenerator-GitHub-Action@v5.4.5
        with:
          reports: "**/*.cobertura.xml" # REQUIRED # The coverage reports that should be parsed (separated by semicolon). Globbing is supported.
          targetdir: "${{ github.workspace }}" # REQUIRED # The directory where the generated report should be saved.
          reporttypes: "Cobertura" # The output formats and scope (separated by semicolon) Values: Badges, Clover, Cobertura, CsvSummary, Html, Html_Dark, Html_Light, Html_BlueRed, HtmlChart, HtmlInline, HtmlInline_AzurePipelines, HtmlInline_AzurePipelines_Dark, HtmlInline_AzurePipelines_Light, HtmlSummary, JsonSummary, Latex, LatexSummary, lcov, MarkdownSummary, MarkdownSummaryGithub, MarkdownDeltaSummary, MHtml, PngChart, SonarQube, TeamCitySummary, TextSummary, TextDeltaSummary, Xml, XmlSummary
          verbosity: "Info" # The verbosity level of the log messages. Values: Verbose, Info, Warning, Error, Off
          title: "Code Coverage" # Optional title.
          tag: "${{ github.run_number }}_${{ github.run_id }}" # Optional tag or build version.
          customSettings: "" # Optional custom settings (separated by semicolon). See: https://github.com/danielpalme/ReportGenerator/wiki/Settings.
          toolpath: "reportgeneratortool" # Default directory for installing the dotnet tool.
      - name: Upload Combined Coverage XML
        uses: actions/upload-artifact@v4
        with:
          name: coverage
          path: ${{ github.workspace }}/Cobertura.xml
          retention-days: 5
      - name: Publish Code Coverage Report
        uses: irongut/CodeCoverageSummary@v1.3.0
        with:
          filename: "Cobertura.xml"
          badge: true
          fail_below_min: false # just informative for now
          format: markdown
          hide_branch_rate: false
          hide_complexity: false
          indicators: true
          output: both
          thresholds: "10 30"
          
      - name: Add Coverage PR Comment
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          recreate: true
          path: code-coverage-results.md
     
      - name: Upload Coverage Results
        uses: actions/upload-artifact@v4
        with:
          name: code-coverage-results
          path: code-coverage-results.md

      - name: Output Coverage Results to Summary
        run: cat code-coverage-results.md >> $GITHUB_STEP_SUMMARY
      
      - name: Upload Test Result Files
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: ${{ github.workspace }}/**/TestResults/**/*
          retention-days: 5
          
      - name: Publish Test Results
        uses: EnricoMi/publish-unit-test-result-action@v2.18.0
        if: always()
        with:
          # NOTE: using trx_files instead of files due to https://github.com/EnricoMi/publish-unit-test-result-action/issues/424
          trx_files: "${{ github.workspace }}/**/*.trx"


  TestFirstRun:
    name: test suite
    permissions: write-all
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Check out the code
        uses: actions/setup-dotnet@v4
        with:
            dotnet-version: |
              8.x

  TestReady: 
    permissions: write-all
    strategy:
      matrix:
        test_project:
          - name: TestProject1
            path: ./TestProject1/TestProject1.csproj
          - name: TestProject2
            path: ./TestProject2/TestProject2.csproj
    name: Test Suite ${{ matrix.test_project.name }}
    runs-on: ubuntu-latest
    steps:
    - name: Test with dotnet
      run: dotnet test ${{matrix.test_project.path}} --logger trx --results-directory "TestResults-${{ matrix.test_project.name }}" --collect:"XPlat Code Coverage" 
    - name: Upload dotnet test results
      uses: actions/upload-artifact@v4
      with:
        name: dotnet-results-${{ matrix.test_project.name}}
        path: TestResults-${{ matrix.test_project.name }}
    #   if: ${{ always() }}
    #     dotnet tool install --global dotnet-coverage
    #     dotnet-coverage merge *.trx --rescurse --output merged.trx     
    # - name: Debug - List TRX Files
    #   run: ls -R *.trx
  TestComplete:
    needs: TestReady
    permissions: write-all
    runs-on: ubuntu-latest
    steps:
      - name: Placeholder Step
        run: |
          dotnet tool install --global dotnet-coverage
          dotnet-coverage merge *.trx --rescurse --output merged.trx
          ls -R *.trx
      


  # test:
  #   name: "Run Tests for ${{ matrix.test_project.name }}"
  #   runs-on: ubuntu-latest
  #   permissions: write-all
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       test_project:
  #         - name: TestProject1
  #           path: ./TestProject1/TestProject1.csproj
  #         - name: TestProject2
  #           path: ./TestProject2/TestProject2.csproj

  #   steps:
  #     - name: Check out the code
  #       uses: actions/checkout@v4
  #       with:
  #         fetch-depth: 0

  #     - name: Setup .NET
  #       uses: actions/setup-dotnet@v4
  #       with:
  #         dotnet-version: |
  #           8.x

  #     - name: Run Tests with Code Coverage
  #       run: |
  #         dotnet test ${{ matrix.test_project.path }} --configuration ${{ env.BUILD_CONFIGURATION }} --verbosity normal --logger trx --collect:"XPlat Code Coverage" /p:CoverletOutputFormat=cobertura /p:CoverletOutput=coverage-results/

  #     - name: Debug - List Coverage Files
  #       run: ls -R coverage-results/

  #     - name: Upload Coverage Report
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: coverage-${{ matrix.test_project.name }}
  #         path: coverage-results/
  #         retention-days: 1